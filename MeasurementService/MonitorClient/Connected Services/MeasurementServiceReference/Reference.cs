//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MonitorClient.MeasurementServiceReference {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="MeasurementServiceReference.IMeasurementService", CallbackContract=typeof(MonitorClient.MeasurementServiceReference.IMeasurementServiceCallback))]
    public interface IMeasurementService {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IMeasurementService/Subscribe")]
        void Subscribe(int id);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IMeasurementService/Subscribe")]
        System.Threading.Tasks.Task SubscribeAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IMeasurementService/Unsubscribe")]
        void Unsubscribe(int id);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IMeasurementService/Unsubscribe")]
        System.Threading.Tasks.Task UnsubscribeAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IMeasurementService/UnsubscribeAll")]
        void UnsubscribeAll(int id);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IMeasurementService/UnsubscribeAll")]
        System.Threading.Tasks.Task UnsubscribeAllAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMeasurementService/AddMeasurement", ReplyAction="http://tempuri.org/IMeasurementService/AddMeasurementResponse")]
        void AddMeasurement(int id, int value, string type);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMeasurementService/AddMeasurement", ReplyAction="http://tempuri.org/IMeasurementService/AddMeasurementResponse")]
        System.Threading.Tasks.Task AddMeasurementAsync(int id, int value, string type);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMeasurementService/ViewActiveStations", ReplyAction="http://tempuri.org/IMeasurementService/ViewActiveStationsResponse")]
        string ViewActiveStations();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMeasurementService/ViewActiveStations", ReplyAction="http://tempuri.org/IMeasurementService/ViewActiveStationsResponse")]
        System.Threading.Tasks.Task<string> ViewActiveStationsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMeasurementService/GetAllMeasurementsOfMeasurer", ReplyAction="http://tempuri.org/IMeasurementService/GetAllMeasurementsOfMeasurerResponse")]
        string GetAllMeasurementsOfMeasurer(int measurerId, System.DateTime fromTime, System.DateTime toTime, int type);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMeasurementService/GetAllMeasurementsOfMeasurer", ReplyAction="http://tempuri.org/IMeasurementService/GetAllMeasurementsOfMeasurerResponse")]
        System.Threading.Tasks.Task<string> GetAllMeasurementsOfMeasurerAsync(int measurerId, System.DateTime fromTime, System.DateTime toTime, int type);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMeasurementService/GetAllMomentsOfLimitValues", ReplyAction="http://tempuri.org/IMeasurementService/GetAllMomentsOfLimitValuesResponse")]
        string GetAllMomentsOfLimitValues(int measurerId, int type, int limitType, double limit);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMeasurementService/GetAllMomentsOfLimitValues", ReplyAction="http://tempuri.org/IMeasurementService/GetAllMomentsOfLimitValuesResponse")]
        System.Threading.Tasks.Task<string> GetAllMomentsOfLimitValuesAsync(int measurerId, int type, int limitType, double limit);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMeasurementService/GetAllMomentsOfLimitValuesOnSpecificLocati" +
            "on", ReplyAction="http://tempuri.org/IMeasurementService/GetAllMomentsOfLimitValuesOnSpecificLocati" +
            "onResponse")]
        string GetAllMomentsOfLimitValuesOnSpecificLocation(string locationName, int type, int limitType, double limit);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMeasurementService/GetAllMomentsOfLimitValuesOnSpecificLocati" +
            "on", ReplyAction="http://tempuri.org/IMeasurementService/GetAllMomentsOfLimitValuesOnSpecificLocati" +
            "onResponse")]
        System.Threading.Tasks.Task<string> GetAllMomentsOfLimitValuesOnSpecificLocationAsync(string locationName, int type, int limitType, double limit);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMeasurementService/GetAverageOnLocation", ReplyAction="http://tempuri.org/IMeasurementService/GetAverageOnLocationResponse")]
        string GetAverageOnLocation(string locationName, int type, System.DateTime dateFrom, System.DateTime dateUntil);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMeasurementService/GetAverageOnLocation", ReplyAction="http://tempuri.org/IMeasurementService/GetAverageOnLocationResponse")]
        System.Threading.Tasks.Task<string> GetAverageOnLocationAsync(string locationName, int type, System.DateTime dateFrom, System.DateTime dateUntil);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IMeasurementServiceCallback {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMeasurementService/NotifyOfMeasurement", ReplyAction="http://tempuri.org/IMeasurementService/NotifyOfMeasurementResponse")]
        void NotifyOfMeasurement(int id, double value, string type);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IMeasurementServiceChannel : MonitorClient.MeasurementServiceReference.IMeasurementService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class MeasurementServiceClient : System.ServiceModel.DuplexClientBase<MonitorClient.MeasurementServiceReference.IMeasurementService>, MonitorClient.MeasurementServiceReference.IMeasurementService {
        
        public MeasurementServiceClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public MeasurementServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public MeasurementServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public MeasurementServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public MeasurementServiceClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public void Subscribe(int id) {
            base.Channel.Subscribe(id);
        }
        
        public System.Threading.Tasks.Task SubscribeAsync(int id) {
            return base.Channel.SubscribeAsync(id);
        }
        
        public void Unsubscribe(int id) {
            base.Channel.Unsubscribe(id);
        }
        
        public System.Threading.Tasks.Task UnsubscribeAsync(int id) {
            return base.Channel.UnsubscribeAsync(id);
        }
        
        public void UnsubscribeAll(int id) {
            base.Channel.UnsubscribeAll(id);
        }
        
        public System.Threading.Tasks.Task UnsubscribeAllAsync(int id) {
            return base.Channel.UnsubscribeAllAsync(id);
        }
        
        public void AddMeasurement(int id, int value, string type) {
            base.Channel.AddMeasurement(id, value, type);
        }
        
        public System.Threading.Tasks.Task AddMeasurementAsync(int id, int value, string type) {
            return base.Channel.AddMeasurementAsync(id, value, type);
        }
        
        public string ViewActiveStations() {
            return base.Channel.ViewActiveStations();
        }
        
        public System.Threading.Tasks.Task<string> ViewActiveStationsAsync() {
            return base.Channel.ViewActiveStationsAsync();
        }
        
        public string GetAllMeasurementsOfMeasurer(int measurerId, System.DateTime fromTime, System.DateTime toTime, int type) {
            return base.Channel.GetAllMeasurementsOfMeasurer(measurerId, fromTime, toTime, type);
        }
        
        public System.Threading.Tasks.Task<string> GetAllMeasurementsOfMeasurerAsync(int measurerId, System.DateTime fromTime, System.DateTime toTime, int type) {
            return base.Channel.GetAllMeasurementsOfMeasurerAsync(measurerId, fromTime, toTime, type);
        }
        
        public string GetAllMomentsOfLimitValues(int measurerId, int type, int limitType, double limit) {
            return base.Channel.GetAllMomentsOfLimitValues(measurerId, type, limitType, limit);
        }
        
        public System.Threading.Tasks.Task<string> GetAllMomentsOfLimitValuesAsync(int measurerId, int type, int limitType, double limit) {
            return base.Channel.GetAllMomentsOfLimitValuesAsync(measurerId, type, limitType, limit);
        }
        
        public string GetAllMomentsOfLimitValuesOnSpecificLocation(string locationName, int type, int limitType, double limit) {
            return base.Channel.GetAllMomentsOfLimitValuesOnSpecificLocation(locationName, type, limitType, limit);
        }
        
        public System.Threading.Tasks.Task<string> GetAllMomentsOfLimitValuesOnSpecificLocationAsync(string locationName, int type, int limitType, double limit) {
            return base.Channel.GetAllMomentsOfLimitValuesOnSpecificLocationAsync(locationName, type, limitType, limit);
        }
        
        public string GetAverageOnLocation(string locationName, int type, System.DateTime dateFrom, System.DateTime dateUntil) {
            return base.Channel.GetAverageOnLocation(locationName, type, dateFrom, dateUntil);
        }
        
        public System.Threading.Tasks.Task<string> GetAverageOnLocationAsync(string locationName, int type, System.DateTime dateFrom, System.DateTime dateUntil) {
            return base.Channel.GetAverageOnLocationAsync(locationName, type, dateFrom, dateUntil);
        }
    }
}
